Introduction to Tools Exercises
-------------------------------

The following exercises cover the command line, and Git.

Your instructor will help you navigate to the "playground", and open this file.

Getting to the Playground
-------------------------

The first step is to open your shell, and make sure you are in the playground.

$ cd ~/workspaces/<your-name>c-exercises/m1-w1d1-csharp-intro-to-tools-exercises
$ pwd
/c/Users/<your-name>/workspaces/<your-name>c-exercises/m1-w1d1-csharp-intro-to-tools-exercises


Once you have confirmed you are in the playground, you may proceed with the exercises. 

If you are having trouble finding the playground, please ask another student to review your steps. A second pair of eyes is one of the best debugging tools a programmer has. If you are still unable to enter the playground, please see one of the instructors.

Exercises
---------

Type, or copy-and-paste your answers immediately below the questions.  When you are done, try submitting your work by creating a Git Pull Request. One of the instructors will then review your answers.

1.  What does the ~ (tilde) character in the `cd ~/workspaces/<your-name>c-exercises/m1-w1d1-csharp-intro-to-tools-exercises` command from above refer to?

2.  What is your current directory location?

3.  Display a list of all the files and folders in your current directory locaton.

4.  What are the names of the files from Question 3?

5.  What are the names of the folders from Question 3?

6.  The `less` utility is commonly used to read-only view the contents of files. 
    To use, simply enter `less <file-name>`. 
    You may PageUp, PageDown, and search within `less`. Press Q to quit. Press H for additional help.
    Try:
    $ less pagila.sql
   
    What are the last three lines in pagila.sql?
    
7.  Another useful read-only utility is `cat` which streams the contents of the file. 
    It is commonly connected to some other utility such as `sort` or `grep` using a pipe.
    Try:
    $ cat pagila.sql
    
    What happened?
        
8.  `grep` is a work horse utility that is used to search the contents of files.
    It is commonly connected via a pipe to another utility which streams file contents to it.
    To use, simply enter `grep -i <word-to-search>`.  The -i tells `grep` to ignore case.
    Try:
    $ cat pagila.sql | grep -i ohio
    
    What was displayed?
    
    Try:
    $ cat pagila.sql | grep -i 'buenos aires'      ### Quotes are needed because of the embedded space.
    
    Did grep find "Buenos Aires" in the file (Yes/No)?
    
    Try:
    $ cat pagila.sql | grep -i horse
    
    Did grep find any occurances of "horse" (Yes/No)?

-----------------------------------------------------------------------------------------------------------------------------------------------------------
You are strongly encouraged to make `less`, `cat | grep`, and the undiscussed, `find -exec grep` (look it up) a part of your regular commannd line toolkit.
-----------------------------------------------------------------------------------------------------------------------------------------------------------

9.  csharp-helloworld contains a representation of a simple Helloworld Visual Studio project.  
    Change directory into csharp-helloworld, and list all its files and folders.

10. Helloworld.sln is a Visual Studio solution file. You will learn more about this on your second day.
    View the file with less.

11. Change into Helloworld directory under csharp-helloworld.

    Show your current working directory. 

    List all its files and folders in current working directory.
    
12. "Program.cs" is the sole source code file of the Helloworld application.
    Make a backup of the file named "Program.cs.backup"
    
    Show the command(s) you used.
    
    List all the files and folders in the Helloworld directory after the backup has been made.
    
13. Rename "Program.cs.backup" to "Program.cs.copy"

    Show the command(s) you used.
    
    List all the files and folders in the Helloworld directory after the file was renamed.
    
14. Remove the backup file, "Program.cs.copy"

    Show the command(s) you used.
    
    List all the files and folders in the Helloworld directory after removing the backup.

15. Once you are completed, navigate to the root playground direct "/c/Users/<your-name>/workspaces/<your-name>c-exercises/m1-w1d1-csharp-intro-to-tools-exercises" and stage files in git.
	You will use "git add ." to stage all files.
	
16. Use the "git status" command to check for any files that have not been staged. If there aren't any, then you can commit with git commit -m "My first Git Commit"

17. Push your changes to BitBucket using "git push origin master" and an instructor will review your work.
